{
  "type": "list",
  "data": [
    {
      "id": "lc_001",
      "title": "Two Sum (Hash)",
      "problem": "Given an integer array nums and an integer target, return the indices of the two numbers such that they add up to target. Each input has exactly one solution; you may not use the same element twice; return in any order.\nExamples: nums=[2,7,11,15], target=9 -> [0,1]; nums=[3,2,4], target=6 -> [1,2]; nums=[3,3], target=6 -> [0,1].",
      "difficulty": "easy",
      "category": "leetcode",
      "topic": "hash"
    },
    {
      "id": "lc_002",
      "title": "Group Anagrams",
      "problem": "Given an array of strings strs, group the anagrams together (order arbitrary).\nExamples: strs=[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"] -> [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]; strs=[\"\"] -> [[\"\"]]; strs=[\"a\"] -> [[\"a\"]].",
      "difficulty": "medium",
      "category": "leetcode",
      "topic": "hash"
    },
    {
      "id": "lc_003",
      "title": "Longest Consecutive Sequence (O(n))",
      "problem": "Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence in O(n).\nExamples: nums=[100,4,200,1,3,2] -> 4 (sequence [1,2,3,4]); nums=[0,3,7,2,5,8,4,6,0,1] -> 9.",
      "difficulty": "medium",
      "category": "leetcode",
      "topic": "hash"
    },
    {
      "id": "lc_004",
      "title": "Move Zeroes (Two Pointers)",
      "problem": "Given an integer array nums, move all 0's to the end while maintaining the relative order of the non-zero elements. Do this in-place.\nExamples: nums=[0,1,0,3,12] -> [1,3,12,0,0]; nums=[0] -> [0].",
      "difficulty": "easy",
      "category": "leetcode",
      "topic": "two-pointers"
    },
    {
      "id": "lc_005",
      "title": "3Sum",
      "problem": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] with i != j != k and sum 0, without duplicates.\nExamples: nums=[-1,0,1,2,-1,-4] -> [[-1,-1,2],[-1,0,1]]; nums=[0,1,1] -> []; nums=[0,0,0] -> [[0,0,0]].",
      "difficulty": "medium",
      "category": "leetcode",
      "topic": "two-pointers"
    },
    {
      "id": "lc_006",
      "title": "Longest Substring Without Repeating Characters (Sliding Window)",
      "problem": "Given a string s, find the length of the longest substring without repeating characters.\nExamples: \"abcabcbb\" -> 3; \"bbbbb\" -> 1; \"pwwkew\" -> 3.",
      "difficulty": "medium",
      "category": "leetcode",
      "topic": "sliding-window"
    },
    {
      "id": "lc_007",
      "title": "Find All Anagram Indices",
      "problem": "Given strings s and p, return all start indices of p's anagrams in s (any order).\nExamples: s=\"cbaebabacd\", p=\"abc\" -> [0,6]; s=\"abab\", p=\"ab\" -> [0,1,2].",
      "difficulty": "medium",
      "category": "leetcode",
      "topic": "sliding-window"
    },
    {
      "id": "lc_008",
      "title": "Subarray Sum Equals K",
      "problem": "Given an integer array nums and an integer k, return the total number of continuous subarrays whose sum equals k.\nExamples: nums=[1,1,1], k=2 -> 2; nums=[1,2,3], k=3 -> 2.",
      "difficulty": "medium",
      "category": "leetcode",
      "topic": "prefix-sum"
    },
    {
      "id": "lc_009",
      "title": "Minimum Window Substring",
      "problem": "Given two strings s and t, return the minimum window in s which contains all the characters of t. If no such window exists, return an empty string.\nExamples: s=\"ADOBECODEBANC\", t=\"ABC\" -> \"BANC\"; s=\"a\", t=\"a\" -> \"a\".",
      "difficulty": "hard",
      "category": "leetcode",
      "topic": "sliding-window"
    },
    {
      "id": "lc_010",
      "title": "Maximum Subarray",
      "problem": "Given an integer array nums, find the contiguous subarray which has the largest sum.\nExample: [-2,1,-3,4,-1,2,1,-5,4] -> 6.",
      "difficulty": "easy",
      "category": "leetcode",
      "topic": "dp"
    },
    {
      "id": "lc_011",
      "title": "Merge Intervals",
      "problem": "Given an array of intervals, merge all overlapping intervals, and return an array of the non-overlapping intervals.\nExample: [[1,3],[2,6],[8,10],[15,18]] -> [[1,6],[8,10],[15,18]].",
      "difficulty": "medium",
      "category": "leetcode",
      "topic": "intervals"
    },
    {
      "id": "lc_012",
      "title": "Rotate Array",
      "problem": "Given an array, rotate the array to the right by k steps, in-place.\nExample: nums=[1,2,3,4,5,6,7], k=3 -> [5,6,7,1,2,3,4].",
      "difficulty": "medium",
      "category": "leetcode",
      "topic": "array"
    },
    {
      "id": "lc_013",
      "title": "Product of Array Except Self",
      "problem": "Given an integer array nums, return an array answer such that answer[i] is the product of all the elements of nums except nums[i]. No division; O(n).\nExample: nums=[1,2,3,4] -> [24,12,8,6].",
      "difficulty": "medium",
      "category": "leetcode",
      "topic": "prefix-suffix"
    },
    {
      "id": "lc_014",
      "title": "First Missing Positive",
      "problem": "Given an unsorted integer array nums, return the smallest missing positive integer. O(n) time and O(1) extra space.\nExamples: [1,2,0] -> 3; [3,4,-1,1] -> 2.",
      "difficulty": "hard",
      "category": "leetcode",
      "topic": "array"
    },
    {
      "id": "lc_015",
      "title": "Number of Islands",
      "problem": "Given a 2D grid of '1' and '0', count the number of islands (connected 4-directionally).",
      "difficulty": "medium",
      "category": "leetcode",
      "topic": "graph"
    },
    {
      "id": "lc_016",
      "title": "Course Schedule",
      "problem": "Given numCourses and prerequisites pairs, determine if you can finish all courses.\nExamples: numCourses=2, prerequisites=[[1,0]] -> true; [[1,0],[0,1]] -> false.",
      "difficulty": "medium",
      "category": "leetcode",
      "topic": "graph"
    },
    {
      "id": "lc_017",
      "title": "Implement Trie (Prefix Tree)",
      "problem": "Implement Trie with insert(word), search(word), startsWith(prefix).",
      "difficulty": "medium",
      "category": "leetcode",
      "topic": "trie"
    },
    {
      "id": "lc_018",
      "title": "Permutations",
      "problem": "Given a collection of distinct integers nums, return all permutations.\nExample: nums=[1,2,3] -> [[1,2,3], ...].",
      "difficulty": "medium",
      "category": "leetcode",
      "topic": "backtracking"
    },
    {
      "id": "lc_019",
      "title": "Subsets (Power Set)",
      "problem": "Given an integer array nums of distinct elements, return all possible subsets (the power set) without duplicates.\nExample: nums=[1,2,3] -> [[],[1],[2],[1,2],[3],...].",
      "difficulty": "medium",
      "category": "leetcode",
      "topic": "backtracking"
    },
    {
      "id": "lc_020",
      "title": "Combination Sum",
      "problem": "Given an array of distinct integers candidates and a target, return all unique combinations where the chosen numbers sum to target. Numbers may be reused.\nExample: candidates=[2,3,6,7], target=7 -> [[2,2,3],[7]].",
      "difficulty": "medium",
      "category": "leetcode",
      "topic": "backtracking"
    }
  ],
  "count": 20,
  "metadata": {
    "source": "data/leetcode_dataset.json",
    "format": "json",
    "dataset_type": "leetcode"
  }
} 